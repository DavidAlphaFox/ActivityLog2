#lang racket
;; build.rkt -- utilities for building the ActivityLog2 application

;; This file is part of ActivityLog2, an fitness activity tracker
;; Copyright (C) 2015 Alex Harsanyi (AlexHarsanyi@gmail.com)
;;
;; This program is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the Free
;; Software Foundation, either version 3 of the License, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
;; more details.

;; NOTE: Gracket instance used to run this might have to have "debugging"
;; disabled in the Language menu

(require compiler/bundle-dist
         compiler/distribute
         compiler/embed
         file/ico
         images/icons/stickman
         launcher/launcher
         pict
         racket/draw)

;; Create an ICO file from the bitmap BMP.  The resulting icon will be square
;; even if BMP is not.  The height of BMP will determine the size of the icon.
(define (bitmap->ico bmp)
  (let* ((w (send bmp get-width))
         (h (send bmp get-height))
         (d (send bmp get-depth))
         (buf (make-bytes (* w h 4))))
    (send bmp get-argb-pixels 0 0 w h buf)
    ;; Bitmaps generated by the icon tools are not square... make a square one
    (let ((nbmp (make-object bitmap% h h #f #t))
          (ofs (exact-round (/ (- h w) 2))))
      (send nbmp set-argb-pixels ofs 0 w h buf)
      (let ((nbuf (make-bytes (* h h 4))))
        (send nbmp get-argb-pixels 0 0 h h nbuf)
        (argb->ico h h nbuf #:depth d)))))

;; Create an application icon of SIZE height
(define (make-app-icon size)
  (let ((bmp (running-stickman-icon 0.9 #:height size
                                    #:body-color "green"
                                    #:arm-color "white"
                                    #:head-color "white")))
    (bitmap->ico bmp)))

;; Create an icon in ICON-FILE by applying MAKE-ICON-FN to each size in
;; ICON-SIZES and writing the result to disk.
(define (create-icon-file icon-file make-icon-fn icon-sizes)
  (let ((icons (map make-icon-fn icon-sizes)))
    (write-icos icons icon-file #:exists 'replace)))

;; Icon sizes we will generate
(define icon-sizes '(16 20 24 32 40 48 64 96 128 256))
(define app-icon-file "ActivityLog2.ico")
(define app-exe-file "ActivityLog2.exe")

(define (app-revision)
  (parameterize ((current-error-port (open-output-bytes)))
    (let ((rev (string-trim (with-output-to-string
                              (lambda () (system "git rev-parse HEAD")))))
          (status (with-output-to-string
                    (lambda () (system "git status --porcelain")))))
      (if (string=? status "")
          rev
          (format "~a (modified)" rev)))))

(define (app-build-time)
  (let ((ts (seconds->date (current-seconds))))
    (string-append
     (~a (date-year ts))
     "/"
     (~a (date-month ts) #:width 2 #:left-pad-string "0")
     "/"
     (~a (date-month ts) #:width 2 #:left-pad-string "0")
     " "
     (~a (date-hour ts) #:width 2 #:left-pad-string "0")
     ":"
     (~a (date-minute ts) #:width 2 #:left-pad-string "0")
     ":"
     (~a (date-second ts) #:width 2 #:left-pad-string "0"))))

(define (build-app)

  (unless (file-exists? app-icon-file)
    (create-icon-file app-icon-file make-app-icon icon-sizes))

  (with-output-to-file "./build-id.txt"
    (lambda ()
      (printf "~a ~a~%" (app-revision) (app-build-time)))
    #:mode 'text #:exists 'truncate/replace)

  (parameterize
      ([use-compiled-file-paths (list "compiled")])
    (create-embedding-executable
     app-exe-file
     #:modules '((#f "run.rkt"))
     #:mred? #t
     #:configure-via-first-module? #t
     #:expand-namespace (make-base-namespace)
     #:literal-expression
     (parameterize ([current-namespace (make-base-namespace)])
       (compile `(namespace-require ''run)))
     #:aux (build-aux-from-path app-icon-file))))

(define (mkdist)
  (assemble-distribution
   "dist"
   (list app-exe-file)))
